#!/usr/bin/env python3
"""
Fast Mode Processing - Skip non-essential agents for quick results
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from agents.architecture_analyzer import ArchitectureAnalyzer
from utils.file_processor import FileProcessor
from utils.zip_generator import ZipGenerator
import time

class FastModeProcessor:
    """Optimized processor for quick results"""
    
    def __init__(self):
        self.arch_analyzer = ArchitectureAnalyzer()
        self.file_processor = FileProcessor()
        self.zip_generator = ZipGenerator()
    
    def process_fast(self, filepath, environment="development"):
        """Process architecture diagram in fast mode - Architecture Analyzer only"""
        print("üöÄ Fast Mode Processing - Architecture Analysis Only")
        
        start_time = time.time()
        
        try:
            # Step 1: Extract content from file (fast)
            print("üìã Extracting content from file...")
            content = self.file_processor.process_file(filepath)
            
            # Step 2: Analyze architecture only (skip other agents)
            print("üîç Analyzing architecture (fast mode)...")
            architecture_analysis = self.arch_analyzer.analyze_architecture(content)
            
            # Check for errors
            if architecture_analysis.get('error'):
                return {
                    'error': architecture_analysis.get('error'),
                    'message': architecture_analysis.get('error_message', 'Analysis failed'),
                    'processing_time': time.time() - start_time
                }
            
            # Step 3: Generate minimal output (basic Bicep template)
            print("üîß Generating basic Bicep template...")
            basic_bicep = self._generate_basic_bicep(architecture_analysis)
            
            # Step 4: Create fast output package
            print("üì¶ Creating fast output package...")
            zip_filename = self._create_fast_package(
                architecture_analysis, 
                basic_bicep, 
                environment
            )
            
            end_time = time.time()
            processing_time = end_time - start_time
            
            return {
                'zip_filename': zip_filename,
                'processing_time': processing_time,
                'mode': 'fast',
                'components_count': len(architecture_analysis.get('components', [])),
                'processing_method': architecture_analysis.get('processing_method', 'unknown'),
                'tokens_used': architecture_analysis.get('tokens_used', 0),
                'confidence': architecture_analysis.get('confidence', 0),
                'processing_summary': {
                    'architecture_summary': {
                        'components_count': len(architecture_analysis.get('components', [])),
                        'services_identified': len(set(comp.get('type', '') for comp in architecture_analysis.get('components', []))),
                        'environment': environment
                    },
                    'mode': 'fast_mode',
                    'agents_executed': ['Architecture Analyzer'],
                    'agents_skipped': ['Policy Checker', 'Cost Optimizer', 'Bicep Generator (full)']
                }
            }
            
        except Exception as e:
            return {
                'error': 'processing_failed',
                'message': f'Fast processing failed: {str(e)}',
                'processing_time': time.time() - start_time
            }
    
    def _generate_basic_bicep(self, architecture_analysis):
        """Generate a basic Bicep template from architecture analysis"""
        components = architecture_analysis.get('components', [])
        
        bicep_content = """// Basic Bicep Template - Generated by Digital Superman (Fast Mode)
param location string = resourceGroup().location
param environment string = 'development'

"""
        
        # Add basic resources
        for i, component in enumerate(components):
            comp_type = component.get('type', '').lower()
            comp_name = component.get('name', f'resource{i}').lower().replace(' ', '')
            
            if 'app service' in comp_type:
                bicep_content += f"""
// App Service Plan
resource appServicePlan{i} 'Microsoft.Web/serverfarms@2021-02-01' = {{
  name: '{comp_name}-plan'
  location: location
  sku: {{
    name: 'B1'
    capacity: 1
  }}
}}

// App Service
resource appService{i} 'Microsoft.Web/sites@2021-02-01' = {{
  name: '{comp_name}'
  location: location
  properties: {{
    serverFarmId: appServicePlan{i}.id
  }}
}}
"""
            elif 'sql database' in comp_type:
                bicep_content += f"""
// SQL Server
resource sqlServer{i} 'Microsoft.Sql/servers@2021-11-01' = {{
  name: '{comp_name}-server'
  location: location
  properties: {{
    administratorLogin: 'adminuser'
    administratorLoginPassword: 'P@ssw0rd123!'
  }}
}}

// SQL Database
resource sqlDatabase{i} 'Microsoft.Sql/servers/databases@2021-11-01' = {{
  name: '{comp_name}'
  parent: sqlServer{i}
  location: location
  properties: {{
    edition: 'Basic'
  }}
}}
"""
            elif 'storage' in comp_type:
                bicep_content += f"""
// Storage Account
resource storageAccount{i} 'Microsoft.Storage/storageAccounts@2021-09-01' = {{
  name: '{comp_name}storage'
  location: location
  sku: {{
    name: 'Standard_LRS'
  }}
  kind: 'StorageV2'
}}
"""
        
        return bicep_content
    
    def _create_fast_package(self, architecture_analysis, basic_bicep, environment):
        """Create a fast output package with minimal content"""
        import json
        import datetime
        
        # Create output directory
        os.makedirs('output', exist_ok=True)
        
        # Generate filename
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        package_name = f"digital_superman_fast_{environment}_{timestamp}"
        
        # Create temporary directory for files
        temp_dir = f"temp/{package_name}"
        os.makedirs(temp_dir, exist_ok=True)
        
        # 1. Architecture Analysis Report
        analysis_report = {
            'analysis_timestamp': datetime.datetime.now().isoformat(),
            'mode': 'fast_mode',
            'environment': environment,
            'architecture_analysis': architecture_analysis,
            'processing_summary': {
                'components_found': len(architecture_analysis.get('components', [])),
                'confidence': architecture_analysis.get('confidence', 0),
                'processing_method': architecture_analysis.get('processing_method', 'unknown'),
                'tokens_used': architecture_analysis.get('tokens_used', 0)
            }
        }
        
        with open(f"{temp_dir}/architecture_analysis.json", 'w') as f:
            json.dump(analysis_report, f, indent=2)
        
        # 2. Basic Bicep Template
        with open(f"{temp_dir}/main.bicep", 'w') as f:
            f.write(basic_bicep)
        
        # 3. Quick Deployment Script
        deploy_script = f"""#!/bin/bash
# Quick Deployment Script - Generated by Digital Superman (Fast Mode)
# Deploy basic infrastructure to Azure

RESOURCE_GROUP="rg-digital-superman-{environment}"
LOCATION="East US"

# Create resource group if it doesn't exist
az group create --name $RESOURCE_GROUP --location "$LOCATION"

# Deploy Bicep template
az deployment group create \\
  --resource-group $RESOURCE_GROUP \\
  --template-file main.bicep \\
  --parameters environment={environment}

echo "Fast deployment completed!"
"""
        
        with open(f"{temp_dir}/deploy.sh", 'w') as f:
            f.write(deploy_script)
        
        # 4. README
        readme_content = f"""# Digital Superman - Fast Mode Output

Generated: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
Environment: {environment}
Mode: Fast Processing

## What's Included

- `architecture_analysis.json` - Complete architecture analysis
- `main.bicep` - Basic Bicep template with core resources
- `deploy.sh` - Quick deployment script

## Components Detected

{len(architecture_analysis.get('components', []))} components found:
"""
        
        for comp in architecture_analysis.get('components', []):
            readme_content += f"- {comp.get('name', 'Unknown')} ({comp.get('type', 'Unknown')})\n"
        
        readme_content += f"""
## Fast Mode Benefits

- Processing time: Under 5 seconds
- Core functionality only
- Essential resources included
- Quick deployment ready

## To Deploy

1. Ensure Azure CLI is installed and logged in
2. Run: `chmod +x deploy.sh && ./deploy.sh`
3. Monitor deployment in Azure Portal

## Note

This is a fast-mode output. For comprehensive analysis including policy compliance,
cost optimization, and detailed deployment pipelines, use the full processing mode.
"""
        
        with open(f"{temp_dir}/README.md", 'w') as f:
            f.write(readme_content)
        
        # Create ZIP package
        zip_path = f"output/{package_name}.zip"
        self.zip_generator.create_zip(temp_dir, zip_path)
        
        # Cleanup temp directory
        import shutil
        shutil.rmtree(temp_dir)
        
        return f"{package_name}.zip"

def test_fast_mode():
    """Test the fast mode processor"""
    processor = FastModeProcessor()
    
    # Test with sample file
    sample_file = "static/samples/sample-azure-architecture.drawio"
    
    if os.path.exists(sample_file):
        print("Testing fast mode with sample file...")
        result = processor.process_fast(sample_file)
        print(f"Result: {result}")
    else:
        print("Sample file not found, testing with mock data...")
        # Create mock file for testing
        with open("test_architecture.txt", "w") as f:
            f.write("""
            Azure Test Architecture:
            - Azure App Service for web hosting
            - Azure SQL Database for data storage
            - Azure Storage Account for file storage
            """)
        
        result = processor.process_fast("test_architecture.txt")
        print(f"Result: {result}")
        
        # Cleanup
        if os.path.exists("test_architecture.txt"):
            os.remove("test_architecture.txt")

if __name__ == "__main__":
    test_fast_mode()
